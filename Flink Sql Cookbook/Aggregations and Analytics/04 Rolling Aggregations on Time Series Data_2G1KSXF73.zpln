{
  "paragraphs": [
    {
      "text": "%md\n\n\u003cbr/\u003e\n\nThis example will show how to calculate an aggregate or cumulative value based on a group of rows using an `OVER` window. A typical use case are rolling aggregations.\n\nThe source table (`temperature_measurements`) is backed by the [`faker` connector](https://github.com/knaufk/flink-faker), which continuously generates rows in memory based on Java Faker expressions.\n\nOVER window aggregates compute an aggregated value for every input row over a range of ordered rows. In contrast to GROUP BY aggregates, OVER aggregates do not reduce the number of result rows to a single row for every group. Instead, OVER aggregates produce an aggregated value for every input row.\n\nThe order needs to be defined by a [time attribute](https://docs.ververica.com/user_guide/sql_development/table_view.html#time-attributes). The range of rows can be defined by a number of rows or a time interval. \n\nIn this example, we are trying to identify outliers in the `temperature_measurements` table. For this, we use an `OVER` window to calculate, for each measurement, the maximum (`MAX`), minimum (`MIN`) and average (`AVG`) temperature across all measurements, as well as the standard deviation (`STDDEV`), for the same city over the previous minute. \n\u003e As an exercise, you can try to write another query to filter out any temperature measurement that are higher or lower than the average by more than four standard deviations.\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-27 15:11:51.487",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614313116607_1862525193",
      "id": "paragraph_1614313116607_1862525193",
      "dateCreated": "2021-02-26 12:18:36.607",
      "dateStarted": "2021-02-26 12:19:26.368",
      "dateFinished": "2021-02-26 12:19:26.402",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql\n\nDROP TABLE IF EXISTS temperature_measurements;\n\nCREATE TABLE temperature_measurements (\n  measurement_time TIMESTAMP(3),\n  city STRING,\n  temperature FLOAT, \n  WATERMARK FOR measurement_time AS measurement_time - INTERVAL \u002715\u0027 SECONDS\n)\nCOMMENT \u0027\u0027\nWITH (\n  \u0027connector\u0027 \u003d \u0027faker\u0027,\n  \u0027fields.measurement_time.expression\u0027 \u003d \u0027#{date.past \u0027\u002715\u0027\u0027,\u0027\u0027SECONDS\u0027\u0027}\u0027,\n  \u0027fields.temperature.expression\u0027 \u003d \u0027#{number.numberBetween \u0027\u00270\u0027\u0027,\u0027\u002750\u0027\u0027}\u0027,\n  \u0027fields.city.expression\u0027 \u003d \u0027#{regexify \u0027\u0027(Chicago|Munich|Berlin|Portland|Hangzhou|Seatle|Beijing|New York){1}\u0027\u0027}\u0027\n);\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 12:20:25.937",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614295390559_156273420",
      "id": "paragraph_1614295390559_156273420",
      "dateCreated": "2021-02-26 07:23:10.559",
      "dateStarted": "2021-02-26 12:20:25.947",
      "dateFinished": "2021-02-26 12:20:26.868",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql(type\u003dupdate)\n\nSELECT \n  measurement_time,\n  city, \n  temperature,\n  AVG(CAST(temperature AS FLOAT)) OVER last_minute AS avg_temperature_minute,\n  MAX(temperature) OVER last_minute AS min_temperature_minute,\n  MIN(temperature) OVER last_minute AS max_temperature_minute,\n  STDDEV(CAST(temperature AS FLOAT)) OVER last_minute AS stdev_temperature_minute\nFROM temperature_measurements \nWINDOW last_minute AS (\n  PARTITION BY city\n  ORDER BY measurement_time\n  RANGE BETWEEN INTERVAL \u00271\u0027 MINUTE PRECEDING AND CURRENT ROW \n)\nORDER BY measurement_time DESC\nLIMIT 10;\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 12:21:25.972",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "measurement_time": "string",
                      "city": "string",
                      "temperature": "string",
                      "avg_temperature_minute": "string",
                      "min_temperature_minute": "string",
                      "max_temperature_minute": "string",
                      "stdev_temperature_minute": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "FLINK JOB",
          "tooltip": "View in Flink web UI",
          "group": "flink",
          "values": [
            {
              "jobUrl": "http://localhost:8081#/job/56e3fd3f6dec1a0782c9b2e6c2fed5b9"
            }
          ],
          "interpreterSettingId": "flink"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614295417642_50466260",
      "id": "paragraph_1614295417642_50466260",
      "dateCreated": "2021-02-26 07:23:37.642",
      "dateStarted": "2021-02-26 12:21:25.979",
      "dateFinished": "2021-02-26 12:21:57.947",
      "status": "ABORT"
    },
    {
      "text": "%flink.ssql\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 07:23:53.605",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614295433605_1989308539",
      "id": "paragraph_1614295433605_1989308539",
      "dateCreated": "2021-02-26 07:23:53.605",
      "status": "READY"
    }
  ],
  "name": "04 Rolling Aggregations on Time Series Data",
  "id": "2G1KSXF73",
  "defaultInterpreterGroup": "flink",
  "version": "0.10.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}